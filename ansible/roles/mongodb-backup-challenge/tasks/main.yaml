---
- name: Deploy MongoDB Backup Challenge Environment
  become: yes
  vars:
    mongo_version: "7.0"
    mongo_admin_user: "admin"
    mongo_admin_password: "AdminPass123!"
    ansible_user: "ubuntu"

  block:
    - name: Install prerequisites
      apt:
        name:
          - gnupg
          - curl
          - wget
          - jq
        state: present
        update_cache: yes
      tags: mongodb-backup-challenge

    - name: Import MongoDB GPG key
      shell: |
        curl -fsSL https://www.mongodb.org/static/pgp/server-{{ mongo_version }}.asc | \
        gpg -o /usr/share/keyrings/mongodb-server-{{ mongo_version }}.gpg --dearmor
      args:
        creates: /usr/share/keyrings/mongodb-server-{{ mongo_version }}.gpg

    - name: Add MongoDB repository
      apt_repository:
        repo: "deb [ arch=amd64,arm64 signed-by=/usr/share/keyrings/mongodb-server-{{ mongo_version }}.gpg ] https://repo.mongodb.org/apt/ubuntu {{ ansible_distribution_release }}/mongodb-org/{{ mongo_version }} multiverse"
        state: present
        filename: mongodb-org-{{ mongo_version }}

    - name: Install MongoDB
      apt:
        name:
          - mongodb-org
          - mongodb-mongosh
          - mongodb-database-tools
        state: present
        update_cache: yes

    - name: Start MongoDB service
      systemd:
        name: mongod
        state: started
        enabled: yes

    - name: Wait for MongoDB to be ready
      wait_for:
        port: 27017
        delay: 3
        timeout: 30

    - name: Check if admin user already exists
      shell: |
        mongosh --quiet --eval "db.adminCommand('listUsers').users.find(u => u.user === '{{ mongo_admin_user }}') ? 'exists' : 'not_exists'" admin
      register: admin_check
      changed_when: false
      failed_when: false

    - name: Create MongoDB admin user (before enabling auth)
      shell: |
        mongosh admin --eval 'db.createUser({user: "{{ mongo_admin_user }}", pwd: "{{ mongo_admin_password }}", roles: [{role: "userAdminAnyDatabase", db: "admin"}, "readWriteAnyDatabase"]})'
      when: admin_check.rc != 0 or 'not_exists' in admin_check.stdout
      register: user_creation
      failed_when: user_creation.rc != 0 and 'already exists' not in user_creation.stderr

    - name: Check if authentication is already enabled
      shell: |
        grep -q "authorization: enabled" /etc/mongod.conf
      register: auth_check
      changed_when: false
      failed_when: false
      become: yes
      tags: mongodb-backup-challenge

    - name: Enable authentication in MongoDB config
      lineinfile:
        path: /etc/mongod.conf
        regexp: '^#?security:'
        line: 'security:'
        state: present
      become: yes
      when: auth_check.rc != 0
      tags: mongodb-backup-challenge

    - name: Add authorization setting
      lineinfile:
        path: /etc/mongod.conf
        insertafter: '^security:'
        line: '  authorization: enabled'
        state: present
      become: yes
      when: auth_check.rc != 0
      tags: mongodb-backup-challenge

    - name: Restart MongoDB with authentication
      systemd:
        name: mongod
        state: restarted
      become: yes
      when: auth_check.rc != 0
      tags: mongodb-backup-challenge

    - name: Wait for MongoDB to be ready after restart
      wait_for:
        port: 27017
        delay: 3
        timeout: 30

    - name: Create challenge directory structure
      file:
        path: "{{ item }}"
        state: directory
        owner: "{{ ansible_user }}"
        group: "{{ ansible_user }}"
        mode: '0755'
      loop:
        - /home/{{ ansible_user }}/mongo-challenge
        - /home/{{ ansible_user }}/mongo-challenge/scripts
        - /opt/mongo-backup
        - /opt/mongo-backup/scripts
        - /opt/mongo-backup/backups
        - /opt/mongo-backup/logs

    - name: Set permissions on backup directory
      file:
        path: /opt/mongo-backup
        state: directory
        owner: "{{ ansible_user }}"
        group: "{{ ansible_user }}"
        mode: '0755'
        recurse: yes

    - name: Generate random temp filename for data ingestion script
      set_fact:
        temp_ingest_script: "/tmp/{{ ansible_date_time.epoch }}_{{ 999999 | random }}_ingest"

    - name: Copy data ingestion helper script to random temp location
      copy:
        src: "{{ dir_path.mongo }}/scripts/ingest_data.sh"
        dest: "{{ temp_ingest_script }}"
        mode: 0755

    - name: Execute data ingestion script
      shell: "{{ temp_ingest_script }}"
      environment:
        MONGO_ADMIN_USER: "{{ mongo_admin_user }}"
        MONGO_ADMIN_PASSWORD: "{{ mongo_admin_password }}"

    - name: Remove temp ingestion script
      file:
        path: "{{ temp_ingest_script }}"
        state: absent

    - name: Copy backup template script
      copy:
        src: "{{ dir_path.mongo }}/scripts/backup_template.sh"
        dest: /home/{{ ansible_user }}/mongo-challenge/scripts/backup_template.sh
        owner: "{{ ansible_user }}"
        group: "{{ ansible_user }}"
        mode: 0755

    - name: Copy disaster simulation script
      copy:
        src: "{{ dir_path.mongo }}/scripts/simulate_disaster.sh"
        dest: /home/{{ ansible_user }}/mongo-challenge/scripts/simulate_disaster.sh
        owner: "{{ ansible_user }}"
        group: "{{ ansible_user }}"
        mode: 0755

    - name: Copy helper script to check MongoDB status (instructor only)
      copy:
        src: "{{ dir_path.mongo }}/scripts/check_mongo.sh"
        dest: /usr/local/bin/check_mongo
        owner: root
        group: root
        mode: 0755
      tags: instructor

    - name: Create credentials file for students
      copy:
        dest: /home/{{ ansible_user }}/mongo-challenge/.mongo_credentials
        content: |
          # MongoDB Credentials for Challenge
          MONGO_HOST="localhost"
          MONGO_PORT="27017"
          MONGO_ADMIN_USER="{{ mongo_admin_user }}"
          MONGO_ADMIN_PASSWORD="{{ mongo_admin_password }}"
        owner: "{{ ansible_user }}"
        group: "{{ ansible_user }}"
        mode: 0600

    - name: Copy challenge tasks file
      copy:
        src: "{{ dir_path.mongo }}/exercise/task.txt"
        dest: /home/{{ ansible_user }}/mongo-challenge/task.txt
        owner: "{{ ansible_user }}"
        group: "{{ ansible_user }}"
        mode: 0644

    - name: Copy hints file
      copy:
        src: "{{ dir_path.mongo }}/exercise/HINTS.md"
        dest: /home/{{ ansible_user }}/mongo-challenge/HINTS.md
        owner: "{{ ansible_user }}"
        group: "{{ ansible_user }}"
        mode: 0644

    - name: Display challenge information
      debug:
        msg:
          - "MongoDB Backup Challenge deployed successfully!"
          - "Challenge directory: /home/{{ ansible_user }}/mongo-challenge"
          - "MongoDB Admin User: {{ mongo_admin_user }}"
          - "MongoDB Admin Password: {{ mongo_admin_password }}"
          - "Students should start by reading: ~/mongo-challenge/tasks.txt"
          - "Instructor can check environment: sudo check_mongo"
