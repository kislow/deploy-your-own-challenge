---
- name: Deploy MongoDB Backup Challenge Environment
  become: yes
  vars:
    mongo_version: "7.0"
    mongo_admin_user: "admin"
    mongo_admin_password: "AdminPass123!"
    ansible_user: "ubuntu"

  block:
    - name: Install prerequisites
      apt:
        name:
          - gnupg
          - curl
          - wget
          - jq
        state: present
        update_cache: yes
      tags: mongodb-backup-challenge

    - name: Install libssl1.1 dependency
      apt:
        deb: http://archive.ubuntu.com/ubuntu/pool/main/o/openssl/libssl1.1_1.1.1f-1ubuntu2_amd64.deb
        state: present

    - name: Import MongoDB GPG key
      apt_key:
        url: https://pgp.mongodb.com/server-7.0.asc
        state: present

    - name: Add MongoDB repository (focal for noble)
      apt_repository:
        repo: "deb [ arch=amd64,arm64 ] https://repo.mongodb.org/apt/ubuntu focal/mongodb-org/7.0 multiverse"
        state: present
        filename: mongodb-org-7.0

    - name: Install MongoDB
      apt:
        name:
          - mongodb-org
          - mongodb-mongosh
          - mongodb-database-tools
        state: present
        update_cache: yes

    - name: Start MongoDB service
      systemd:
        name: mongod
        state: started
        enabled: yes

    - name: Wait for MongoDB to be ready
      wait_for:
        port: 27017
        delay: 5
        timeout: 60
      retries: 3
      delay: 10

    - name: Check if admin user already exists
      shell: |
        mongosh admin -u "{{ mongo_admin_user }}" -p "{{ mongo_admin_password }}" --authenticationDatabase admin --eval "db.getUser('{{ mongo_admin_user }}')" --quiet 2>/dev/null
      register: user_exists_check
      changed_when: false
      failed_when: false
      tags: mongodb-backup-challenge

    - name: Create MongoDB admin user (without authentication)
      shell: |
        mongosh admin --eval "
          try {
            db.createUser({
              user: '{{ mongo_admin_user }}',
              pwd: '{{ mongo_admin_password }}',
              roles: [
                {role: 'userAdminAnyDatabase', db: 'admin'},
                'readWriteAnyDatabase'
              ]
            });
            print('User created successfully');
          } catch (e) {
            if (e.codeName === 'UserAlreadyExists' || e.message.includes('already exists')) {
              print('User already exists');
            } else {
              throw e;
            }
          }
        "
      register: user_creation
      changed_when: "'User created successfully' in user_creation.stdout"
      failed_when:
        - user_creation.rc != 0
        - "'User already exists' not in user_creation.stdout"
        - "'requires authentication' not in user_creation.stderr"
      when: user_exists_check.rc != 0
      tags: mongodb-backup-challenge

    - name: Check if authentication is already enabled
      shell: |
        grep -q "authorization: enabled" /etc/mongod.conf
      register: auth_check
      changed_when: false
      failed_when: false
      become: yes
      tags: mongodb-backup-challenge

    - name: Enable authentication in MongoDB config
      lineinfile:
        path: /etc/mongod.conf
        regexp: '^#?security:'
        line: 'security:'
        state: present
      become: yes
      when: auth_check.rc != 0
      tags: mongodb-backup-challenge

    - name: Add authorization setting
      lineinfile:
        path: /etc/mongod.conf
        insertafter: '^security:'
        line: '  authorization: enabled'
        state: present
      become: yes
      when: auth_check.rc != 0
      tags: mongodb-backup-challenge

    - name: Restart MongoDB with authentication
      systemd:
        name: mongod
        state: restarted
      become: yes
      when: auth_check.rc != 0
      tags: mongodb-backup-challenge

    - name: Wait for MongoDB to be ready after restart
      wait_for:
        port: 27017
        delay: 5
        timeout: 60

    - name: Verify MongoDB is working with authentication
      shell: |
        mongosh -u "{{ mongo_admin_user }}" -p "{{ mongo_admin_password }}" --authenticationDatabase admin --eval "db.adminCommand('listDatabases')" --quiet
      register: mongo_verify
      changed_when: false
      failed_when: mongo_verify.rc != 0

    - name: Create challenge directory structure
      file:
        path: "{{ item }}"
        state: directory
        owner: "{{ ansible_user }}"
        group: "{{ ansible_user }}"
        mode: '0755'
      loop:
        - /home/{{ ansible_user }}/mongo-challenge
        - /home/{{ ansible_user }}/mongo-challenge/scripts
        - /opt/mongo-backup
        - /opt/mongo-backup/scripts
        - /opt/mongo-backup/backups
        - /opt/mongo-backup/logs

    - name: Set permissions on backup directory
      file:
        path: /opt/mongo-backup
        state: directory
        owner: "{{ ansible_user }}"
        group: "{{ ansible_user }}"
        mode: '0755'
        recurse: yes

    - name: Generate random temp filename for data ingestion script
      set_fact:
        temp_ingest_script: "/tmp/{{ ansible_date_time.epoch }}_{{ 999999 | random }}_ingest"

    - name: Copy data ingestion helper script to random temp location
      copy:
        src: "{{ dir_path.mongo }}/scripts/ingest_data.sh"
        dest: "{{ temp_ingest_script }}"
        mode: 0755

    - name: Execute data ingestion script
      shell: "{{ temp_ingest_script }}"
      environment:
        MONGO_ADMIN_USER: "{{ mongo_admin_user }}"
        MONGO_ADMIN_PASSWORD: "{{ mongo_admin_password }}"
      args:
        executable: /bin/bash
      register: ingest_result
      failed_when:
        - ingest_result.rc != 0
        - "'already exists' not in ingest_result.stderr"

    - name: Remove temp ingestion script
      file:
        path: "{{ temp_ingest_script }}"
        state: absent

    - name: Copy backup template script
      copy:
        src: "{{ dir_path.mongo }}/scripts/backup_template.sh"
        dest: /home/{{ ansible_user }}/mongo-challenge/scripts/backup_template.sh
        owner: "{{ ansible_user }}"
        group: "{{ ansible_user }}"
        mode: 0755

    - name: Copy disaster simulation script
      copy:
        src: "{{ dir_path.mongo }}/scripts/simulate_disaster.sh"
        dest: /home/{{ ansible_user }}/mongo-challenge/scripts/simulate_disaster.sh
        owner: "{{ ansible_user }}"
        group: "{{ ansible_user }}"
        mode: 0755

    - name: Create credentials file for students
      copy:
        dest: /home/{{ ansible_user }}/mongo-challenge/.mongo_credentials
        content: |
          # MongoDB Credentials for Challenge
          MONGO_HOST="localhost"
          MONGO_PORT="27017"
          MONGO_ADMIN_USER="{{ mongo_admin_user }}"
          MONGO_ADMIN_PASSWORD="{{ mongo_admin_password }}"
        owner: "{{ ansible_user }}"
        group: "{{ ansible_user }}"
        mode: 0600

    - name: Copy challenge tasks file
      copy:
        src: "{{ dir_path.mongo }}/exercise/task.txt"
        dest: /home/{{ ansible_user }}/mongo-challenge/task.txt
        owner: "{{ ansible_user }}"
        group: "{{ ansible_user }}"
        mode: 0644

    - name: Copy hints file
      copy:
        src: "{{ dir_path.mongo }}/exercise/HINTS.md"
        dest: /home/{{ ansible_user }}/mongo-challenge/HINTS.md
        owner: "{{ ansible_user }}"
        group: "{{ ansible_user }}"
        mode: 0644

    - name: Display challenge information
      debug:
        msg:
          - "MongoDB Backup Challenge deployed successfully!"
          - "Challenge directory: /home/{{ ansible_user }}/mongo-challenge"
          - "MongoDB Admin User: {{ mongo_admin_user }}"
          - "MongoDB Admin Password: {{ mongo_admin_password }}"
          - "Students should start by reading: ~/mongo-challenge/task.txt"
          - "MongoDB authentication verified: {{ mongo_verify.rc == 0 | ternary('SUCCESS', 'FAILED') }}"
